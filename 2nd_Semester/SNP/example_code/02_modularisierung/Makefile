# Make rules are defined as follows:

target: dependencies
	action
# The target is the name of the file that is generated by the makefile.
# The dependencies are the files that are used as input to create the target file.
# The action is the command that is executed to create the target file.
# There needs to be a tab before the action command.

# if a command is too long, it can be split into multiple lines by adding \ to the end of the line

# You can also use variables in makefiles. Variables are defined as follows:

TARGET = myprogram

OBJECTS = program.o file1.o file2.o

$(TARGET): $(OBJECTS)
	gcc -o $(TARGET) $(OBJECTS)

# i.PHONY is used to tell make that the target is not a file name. This is used for targets that do not create files.
# For example, clean is a common target that does not create a file.

.PHONY: clean

# there are some built-in variables in makefiles. Some of the most common ones are:
$@: The target filename.
$<: The first prerequisite filename.
$^: The filenames of all the prerequisites, separated by spaces, discard duplicates.

# You can also use pattern rules in makefiles. Pattern rules are rules that can be applied to multiple files.
# $V-(VAR) is used to get the value of a variable. For example, $(CC) is the value of the CC variable.
# This rule will compile all .c files into .o files.
$(SOURCES) = main.c compute .c gui .c
$(OBJECTS) = $(SOURCES:%.c=%. o) # results in main .o compute .o gui .o

# Suffix rules define how to transform a file with one suffix into a file with another suffix if the target is older than
# the prerequisite. 
%.target: %.prerequisite
	action
# For example, the following rule will compile a .c file into a .o file.
%.o: %.c
	gcc -c $< -o $@

# If there is an error while running a command in a makefile, you can use the - prefix to ignore the error and continue
-rm -f $(TARGET) # remove the target file if it exists the - before rm means to ignore the error if the file does not exist
# You can also run the make command with the -k option to continue running even if there are errors.

# Make will output the commands that it runs. You can suppress this output by using the @ prefix before the command.
# This is especially usefull when using the echo command to print messages.
@echo "done building"

#Usefull flags for running make from the command line
make -n #Dry run. Print the commands that would be executed, but do not execute them.

make -n -p | grep CFLAGS #Print the value of a variable. This is useful for debugging makefiles.
