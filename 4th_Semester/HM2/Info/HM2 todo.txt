TODO:

[] lectures/theory/script?
[] exercises
[] KR
[] summary
[] hope for the best
[] compare summaries

5 Numerische Lösung nicht linearer Gleichungssysteme
5.1-5.4
[] Skript (Theory)
[] exercise 1
- 2D & 3D Plots, Höhenlinien
- Partielles Ableiten, Wellengleichung
[] exercise 2
- Jacobi Matrizen berechnen (Funktionen & Vektoren)
- Ableiten & Jacobi in Python
- Funktionen linearisieren
[] exercise 3
- Newton-Verfahren für nichtlineare Gleichungssysteme
- Gleichungssysteme plotten
- Newton/Näherungsvektoren in Python
- gedämpftes Newton Verfahren
[] KR
[] summarize

6 Ausgleichsrechnung
6.1-6.4
[] Skript (Theory)
[] exercise 4
- Lagrange-Interpolation (fehlende Werte finden)
- Lagrange-Interpolation Python mit polyval
- Koeffizienten des Interpolations-Polynoms finden Python mit polyfit
[] exercise 5
- natürliche kubische Splinefunktion (kubische Polynome, Koeffizienten bestimmen)
- Algorithmus aus Skript für kubische Splinefunktion
- Interpolation kubische Splinefunktion
[] exercise 6
- Methode der kleinsten Quadrate (mit/ohne QR-Zerlegung)
- Normalgleichungssysteme
- Matrizen basics (Konditionszahlen, etc.)
- Fehlerfunktionale
- lineare Ausgleichsrechung (mit Normalgleichungen)
- Fitfunktion & Extrapolation
[] exercise 7
- gedämpftes & ungedämpftes Gauss-Newton-Verfahren (Fitting)
- Konvergenz
- Fehlerfunktionale & Extrema
[] KR
[] summarize

7 Numerische Integration
7.1 - 7.2
[] Skript (Theory)
[] exercise 8
- (summierte) Trapezregel, Rechtecksregel, Simpsonregel
- Beweis dass gilt für Intervall (für obige Regeln)
- absoluter Fehler der Näherung
- exakter Wert eines Integrals 
- Integral mit Trapezregel
- absoluter & relativer Fehler der Integration
[] exercise 9
- Anzahl Subintervalle für max. Fehler (mit den 3 Regeln)
- Romberg-Extrapolation (Integral berechnen)
- Romberg-Algorithmus Python
[] exercise 10
- numerisch vs. analytisch Integral berechnen (inkl. Romberg)
- Anwendung in Physik (help)
[] KR
[] summarize

8 Gewöhnliche Differentialrechung
8.1-8.10
[] Skript (Theory)
[] exercise 11 (DGL)
- Python plotting stuff, DGL und Richtungsfelder
- DGL lösen mit: Euler-Verfahren, Mittelpunktverfahren, modifiziertes Euler-Verfahren (auch in Python)
- jeweils absoluten/relativen Fehler berechnen
[] exercise 12
- Anfangswertproblem
- Runge-Kutta-Verfahren (auch in Python)
- Butcher-Schema
- absoluter Fehler
- Schrittweite der Verfahren & Einfluss
[] exercise 13
- Anfangswertproblem (numerisch berechnen) (auch Python)
[] KR
[] summarize

Ich hatte mich bezüglich dieser Modulwahl schon beim Modulwahlentool-Team gemeldet - ich konnte aufgrund familiärer Umstände die erste Runde der Modulwahlen nicht wahrnehmen, und in der zweiten Runde war das Modul "System on Chip Design" bereits vollständig ausgebucht. Im Zusammenhang mit meiner geplanten PA/BA wäre das Modul System on Chip Design besser geeignet für mich, weshalb ich sehr gerne umwählen würde.